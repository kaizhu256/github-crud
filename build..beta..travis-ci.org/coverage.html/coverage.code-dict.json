{"/home/travis/build/kaizhu256/node-github-crud/test.js":"/* istanbul instrument in package github_crud */\n/* istanbul ignore next */\n/* jslint utility2:true */\n(function (globalThis) {\n    \"use strict\";\n    var consoleError;\n    var local;\n    // init globalThis\n    (function () {\n        try {\n            globalThis = Function(\"return this\")(); // jslint ignore:line\n        } catch (ignore) {}\n    }());\n    globalThis.globalThis = globalThis;\n    // init debug_inline\n    if (!globalThis[\"debug\\u0049nline\"]) {\n        consoleError = console.error;\n        globalThis[\"debug\\u0049nline\"] = function () {\n        /*\n         * this function will both print <arguments> to stderr\n         * and return <arguments>[0]\n         */\n            var argList;\n            argList = Array.from(arguments); // jslint ignore:line\n            // debug arguments\n            globalThis[\"debug\\u0049nlineArguments\"] = argList;\n            consoleError(\"\\n\\ndebug\\u0049nline\");\n            consoleError.apply(console, argList);\n            consoleError(\"\\n\");\n            // return arg0 for inspection\n            return argList[0];\n        };\n    }\n    // init local\n    local = {};\n    local.local = local;\n    globalThis.globalLocal = local;\n    // init isBrowser\n    local.isBrowser = (\n        typeof window === \"object\"\n        && window === globalThis\n        && typeof window.XMLHttpRequest === \"function\"\n        && window.document\n        && typeof window.document.querySelector === \"function\"\n    );\n    // init function\n    local.assertThrow = function (passed, message) {\n    /*\n     * this function will throw error <message> if <passed> is falsy\n     */\n        var error;\n        if (passed) {\n            return;\n        }\n        error = (\n            // ternary-condition\n            (\n                message\n                && typeof message.message === \"string\"\n                && typeof message.stack === \"string\"\n            )\n            // if message is an error-object, then leave it as is\n            ? message\n            : new Error(\n                typeof message === \"string\"\n                // if message is a string, then leave it as is\n                ? message\n                // else JSON.stringify message\n                : JSON.stringify(message, null, 4)\n            )\n        );\n        throw error;\n    };\n    local.functionOrNop = function (fnc) {\n    /*\n     * this function will if <fnc> exists,\n     * them return <fnc>,\n     * else return <nop>\n     */\n        return fnc || local.nop;\n    };\n    local.identity = function (value) {\n    /*\n     * this function will return <value>\n     */\n        return value;\n    };\n    local.nop = function () {\n    /*\n     * this function will do nothing\n     */\n        return;\n    };\n    local.objectAssignDefault = function (target, source) {\n    /*\n     * this function will if items from <target> are\n     * null, undefined, or empty-string,\n     * then overwrite them with items from <source>\n     */\n        Object.keys(source).forEach(function (key) {\n            if (\n                target[key] === null\n                || target[key] === undefined\n                || target[key] === \"\"\n            ) {\n                target[key] = target[key] || source[key];\n            }\n        });\n        return target;\n    };\n    // require builtin\n    if (!local.isBrowser) {\n        local.assert = require(\"assert\");\n        local.buffer = require(\"buffer\");\n        local.child_process = require(\"child_process\");\n        local.cluster = require(\"cluster\");\n        local.crypto = require(\"crypto\");\n        local.dgram = require(\"dgram\");\n        local.dns = require(\"dns\");\n        local.domain = require(\"domain\");\n        local.events = require(\"events\");\n        local.fs = require(\"fs\");\n        local.http = require(\"http\");\n        local.https = require(\"https\");\n        local.net = require(\"net\");\n        local.os = require(\"os\");\n        local.path = require(\"path\");\n        local.querystring = require(\"querystring\");\n        local.readline = require(\"readline\");\n        local.repl = require(\"repl\");\n        local.stream = require(\"stream\");\n        local.string_decoder = require(\"string_decoder\");\n        local.timers = require(\"timers\");\n        local.tls = require(\"tls\");\n        local.tty = require(\"tty\");\n        local.url = require(\"url\");\n        local.util = require(\"util\");\n        local.vm = require(\"vm\");\n        local.zlib = require(\"zlib\");\n    }\n}(this));\n\n\n\n(function (local) {\n\"use strict\";\n\n\n\n// run shared js-env code - init-before\n(function () {\n// init local\nlocal = (globalThis.utility2 || require(\"utility2\")).requireReadme();\nglobalThis.local = local;\n// init test\nlocal.testRunDefault(local);\n}());\n\n\n\n// run shared js-env code - function\n(function () {\nlocal.testCase_githubCrudContentDelete_tree = function (options, onError) {\n/*\n * this function will test githubCrudContentDelete's tree handling-behavior\n */\n    var httpRequest;\n    if (local.isBrowser) {\n        onError(null, options);\n        return;\n    }\n    httpRequest = function (urlParsed, onResponse) {\n        onResponse(httpRequest, urlParsed);\n        return httpRequest;\n    };\n    httpRequest.end = local.nop;\n    httpRequest.ii = -1;\n    httpRequest.on = function (type, onError) {\n        httpRequest.ii += 1;\n        switch (type) {\n        case \"data\":\n            onError(Buffer.from(\n                httpRequest.ii\n                ? \"{\\\"sha\\\":\\\"aa\\\"}\"\n                : (\n                    \"[{\\\"url\\\":\\\"https://github.com\"\n                    + \"/:owner/:repo/blob/:branch/:path\\\"}]\"\n                )\n            ));\n            break;\n        case \"end\":\n            onError();\n            break;\n        }\n        return httpRequest;\n    };\n    local.githubCrudContentDelete({\n        httpRequest: httpRequest,\n        url: \"https://github.com/:owner/:repo/blob/:branch/:path\"\n    }, onError);\n};\n\nlocal.testCase_githubCrudContentXxx_default = function (options, onError) {\n/*\n * this function will test githubCrudContentXxx's default handling-behavior\n */\n    if (local.isBrowser) {\n        onError(null, options);\n        return;\n    }\n    local.onParallelList({\n        list: [\n            \"githubCrudAjax\",\n            \"githubCrudContentDelete\",\n            \"githubCrudContentGet\",\n            \"githubCrudContentPut\",\n            \"githubCrudContentPutFile\",\n            \"githubCrudContentTouch\",\n            \"githubCrudContentTouchList\"\n        ]\n    }, function (options2, onParallel) {\n        var httpRequest;\n        httpRequest = function (urlParsed, onResponse) {\n            setTimeout(onResponse, 0, httpRequest, urlParsed);\n            return httpRequest;\n        };\n        httpRequest.end = local.nop;\n        httpRequest.on = function (type, onError) {\n            switch (type) {\n            case \"data\":\n                onError(Buffer.from(\"{\\\"sha\\\":\\\"aa\\\"}\"));\n                break;\n            case \"end\":\n                setTimeout(onError);\n                break;\n            }\n            return httpRequest;\n        };\n        onParallel.counter += 1;\n        local[options2.element]({\n            content: \"aa\",\n            file: \"https://github.com/:owner/:repo/blob/:branch/:path\",\n            httpRequest: httpRequest,\n            url: \"https://github.com/:owner/:repo/blob/:branch/:path\",\n            urlList: [\"https://github.com/:owner/:repo/blob/:branch/:path\"]\n        }, function (error) {\n            // validate no error occurred\n            local.assertThrow(!error, error);\n            onParallel(null, options);\n        });\n    }, onError);\n};\n\nlocal.testCase_githubCrudContentXxx_error = function (options, onError) {\n/*\n * this function will test githubCrudContentXxx's error handling-behavior\n */\n    if (local.isBrowser) {\n        onError(null, options);\n        return;\n    }\n    local.onParallelList({\n        list: [\n            \"githubCrudAjax\",\n            \"githubCrudContentGet\",\n            \"githubCrudContentPut\",\n            \"githubCrudContentPutFile\",\n            \"githubCrudContentTouch\",\n            \"githubCrudContentTouchList\"\n        ]\n    }, function (options2, onParallel) {\n        var httpRequest;\n        httpRequest = function (urlParsed, onResponse) {\n            setTimeout(onResponse, 0, httpRequest, urlParsed);\n            return httpRequest;\n        };\n        httpRequest.end = local.nop;\n        httpRequest.on = function (type, onError) {\n            switch (type) {\n            case \"data\":\n                onError(Buffer.from(\"{}\"));\n                break;\n            case \"end\":\n                setTimeout(onError);\n                break;\n            case \"error\":\n                setTimeout(onError, null, local.errorDefault);\n                break;\n            }\n            return httpRequest;\n        };\n        onParallel.counter += 1;\n        local[options2.element]({\n            file: \"package.json\",\n            httpRequest: httpRequest,\n            url: \"https://github.com/:owner/:repo/blob/:branch/:path/\",\n            urlList: [\"error\"]\n        }, function (error) {\n            // validate error occurred\n            local.assertThrow(error, options2);\n            onParallel(null, options);\n        });\n    }, onError);\n};\n\nlocal.testCase_githubCrudRepoXxxList_default = function (options, onError) {\n/*\n * this function will test githubCrudRepoXxxList's default handling-behavior\n */\n    if (local.isBrowser) {\n        onError(null, options);\n        return;\n    }\n    options = {};\n    options.statusCode = 404;\n    local.onParallelList({\n        list: [\n            \"githubCrudRepoCreateList\",\n            \"githubCrudRepoDeleteList\"\n        ]\n    }, function (options2, onParallel) {\n        var httpRequest;\n        onParallel.counter += 1;\n        httpRequest = function (urlParsed, onResponse) {\n            var requestObj;\n            requestObj = {};\n            requestObj.statusCode = options.statusCode;\n            options.statusCode = 0;\n            requestObj.end = local.nop;\n            requestObj.on = function (type, onError) {\n                switch (type) {\n                case \"end\":\n                    setTimeout(onError);\n                    break;\n                }\n                return requestObj;\n            };\n            setTimeout(onResponse, 0, requestObj, urlParsed);\n            return requestObj;\n        };\n        local[options2.element]({\n            httpRequest: httpRequest,\n            urlList: [\"aa/bb\"]\n        }, function (error) {\n            // validate no error occurred\n            local.assertThrow(!error, error);\n            onParallel(null, options);\n        });\n    }, onError);\n};\n\nlocal.testCase_githubCrudRepoXxx_error = function (options, onError) {\n/*\n * this function will test githubCrudRepoXxx's error handling-behavior\n */\n    if (local.isBrowser) {\n        onError(null, options);\n        return;\n    }\n    local.onParallelList({\n        list: [\n            \"githubCrudRepoCreateList\",\n            \"githubCrudRepoDeleteList\"\n        ]\n    }, function (options2, onParallel) {\n        onParallel.counter += 1;\n        local[options2.element]({\n            urlList: [\"undefined\"]\n        }, function (error) {\n            // validate error occurred\n            local.assertThrow(error, error);\n            onParallel(null, options);\n        });\n    }, onError);\n};\n}());\n\n\n\n}());\n","/home/travis/build/kaizhu256/node-github-crud/lib.github_crud.js":"// usr/bin/env node\n/*\n * lib.github_crud.js (2019.1.21)\n * https://github.com/kaizhu256/node-github-crud\n * this zero-dependency package will provide a simple cli-tool to PUT / GET / DELETE github files\n *\n */\n\n\n\n/* istanbul instrument in package github_crud */\n/* istanbul ignore next */\n/* jslint utility2:true */\n(function (globalThis) {\n    \"use strict\";\n    var consoleError;\n    var local;\n    // init globalThis\n    (function () {\n        try {\n            globalThis = Function(\"return this\")(); // jslint ignore:line\n        } catch (ignore) {}\n    }());\n    globalThis.globalThis = globalThis;\n    // init debug_inline\n    if (!globalThis[\"debug\\u0049nline\"]) {\n        consoleError = console.error;\n        globalThis[\"debug\\u0049nline\"] = function () {\n        /*\n         * this function will both print <arguments> to stderr\n         * and return <arguments>[0]\n         */\n            var argList;\n            argList = Array.from(arguments); // jslint ignore:line\n            // debug arguments\n            globalThis[\"debug\\u0049nlineArguments\"] = argList;\n            consoleError(\"\\n\\ndebug\\u0049nline\");\n            consoleError.apply(console, argList);\n            consoleError(\"\\n\");\n            // return arg0 for inspection\n            return argList[0];\n        };\n    }\n    // init local\n    local = {};\n    local.local = local;\n    globalThis.globalLocal = local;\n    // init isBrowser\n    local.isBrowser = (\n        typeof window === \"object\"\n        && window === globalThis\n        && typeof window.XMLHttpRequest === \"function\"\n        && window.document\n        && typeof window.document.querySelector === \"function\"\n    );\n    // init function\n    local.assertThrow = function (passed, message) {\n    /*\n     * this function will throw error <message> if <passed> is falsy\n     */\n        var error;\n        if (passed) {\n            return;\n        }\n        error = (\n            // ternary-condition\n            (\n                message\n                && typeof message.message === \"string\"\n                && typeof message.stack === \"string\"\n            )\n            // if message is an error-object, then leave it as is\n            ? message\n            : new Error(\n                typeof message === \"string\"\n                // if message is a string, then leave it as is\n                ? message\n                // else JSON.stringify message\n                : JSON.stringify(message, null, 4)\n            )\n        );\n        throw error;\n    };\n    local.functionOrNop = function (fnc) {\n    /*\n     * this function will if <fnc> exists,\n     * them return <fnc>,\n     * else return <nop>\n     */\n        return fnc || local.nop;\n    };\n    local.identity = function (value) {\n    /*\n     * this function will return <value>\n     */\n        return value;\n    };\n    local.nop = function () {\n    /*\n     * this function will do nothing\n     */\n        return;\n    };\n    local.objectAssignDefault = function (target, source) {\n    /*\n     * this function will if items from <target> are\n     * null, undefined, or empty-string,\n     * then overwrite them with items from <source>\n     */\n        Object.keys(source).forEach(function (key) {\n            if (\n                target[key] === null\n                || target[key] === undefined\n                || target[key] === \"\"\n            ) {\n                target[key] = target[key] || source[key];\n            }\n        });\n        return target;\n    };\n    // require builtin\n    if (!local.isBrowser) {\n        local.assert = require(\"assert\");\n        local.buffer = require(\"buffer\");\n        local.child_process = require(\"child_process\");\n        local.cluster = require(\"cluster\");\n        local.crypto = require(\"crypto\");\n        local.dgram = require(\"dgram\");\n        local.dns = require(\"dns\");\n        local.domain = require(\"domain\");\n        local.events = require(\"events\");\n        local.fs = require(\"fs\");\n        local.http = require(\"http\");\n        local.https = require(\"https\");\n        local.net = require(\"net\");\n        local.os = require(\"os\");\n        local.path = require(\"path\");\n        local.querystring = require(\"querystring\");\n        local.readline = require(\"readline\");\n        local.repl = require(\"repl\");\n        local.stream = require(\"stream\");\n        local.string_decoder = require(\"string_decoder\");\n        local.timers = require(\"timers\");\n        local.tls = require(\"tls\");\n        local.tty = require(\"tty\");\n        local.url = require(\"url\");\n        local.util = require(\"util\");\n        local.vm = require(\"vm\");\n        local.zlib = require(\"zlib\");\n    }\n}(this));\n\n\n\n(function (local) {\n\"use strict\";\n\n\n\n/* istanbul ignore next */\n// run shared js-env code - init-before\n(function () {\n// init local\nlocal = (\n    globalThis.utility2_rollup\n    // || globalThis.utility2_rollup_old\n    // || require(\"./assets.utility2.rollup.js\")\n    || globalThis.globalLocal\n);\n// init exports\nif (local.isBrowser) {\n    globalThis.utility2_github_crud = local;\n} else {\n    module.exports = local;\n    module.exports.__dirname = __dirname;\n}\n// init lib main\nlocal.github_crud = local;\n\n\n\n/* validateLineSortedReset */\nlocal.ajax = function (option, onError) {\n/*\n * this function will send an ajax-request with given <option>.url,\n * with error-handling and timeout\n * example usage:\n    local.ajax({\n        data: \"hello world\",\n        header: {\"x-header-hello\": \"world\"},\n        method: \"POST\",\n        url: \"/index.html\"\n    }, function (error, xhr) {\n        console.log(xhr.statusCode);\n        console.log(xhr.responseText);\n    });\n */\n    var ajaxProgressUpdate;\n    var bufferValidateAndCoerce;\n    var isDone;\n    var local2;\n    var onEvent;\n    var streamCleanup;\n    var timeout;\n    var tmp;\n    var xhr;\n    var xhrInit;\n    // init local2\n    local2 = local.utility2 || {};\n    // init function\n    ajaxProgressUpdate = local2.ajaxProgressUpdate || local.nop;\n    bufferValidateAndCoerce = local2.bufferValidateAndCoerce || function (\n        bff,\n        mode\n    ) {\n    /*\n     * this function will validate and coerce/convert <bff> -> Buffer\n     * (or String if <mode> = \"string\")\n     */\n        // coerce ArrayBuffer -> Buffer\n        if (Object.prototype.toString.call(bff) === \"[object ArrayBuffer]\") {\n            bff = new Uint8Array(bff);\n        }\n        // convert Buffer -> utf8\n        if (mode === \"string\" && typeof bff !== \"string\") {\n            bff = String(bff);\n        }\n        return bff;\n    };\n    onEvent = function (event) {\n    /*\n     * this function will handle events\n     */\n        if (Object.prototype.toString.call(event) === \"[object Error]\") {\n            xhr.error = xhr.error || event;\n            xhr.onEvent({\n                type: \"error\"\n            });\n            return;\n        }\n        // init statusCode\n        xhr.statusCode = (xhr.statusCode || xhr.status) | 0;\n        switch (event.type) {\n        case \"abort\":\n        case \"error\":\n        case \"load\":\n            if (isDone) {\n                return;\n            }\n            isDone = true;\n            // decrement ajaxProgressCounter\n            local2.ajaxProgressCounter = Math.max(\n                local2.ajaxProgressCounter - 1,\n                0\n            );\n            ajaxProgressUpdate();\n            // handle abort or error event\n            switch (!xhr.error && event.type) {\n            case \"abort\":\n            case \"error\":\n                xhr.error = new Error(\"ajax - event \" + event.type);\n                break;\n            case \"load\":\n                if (xhr.statusCode >= 400) {\n                    xhr.error = new Error(\n                        \"ajax - statusCode \" + xhr.statusCode\n                    );\n                }\n                break;\n            }\n            // debug statusCode / method / url\n            if (xhr.error) {\n                xhr.statusCode = xhr.statusCode || 500;\n                xhr.error.statusCode = xhr.statusCode;\n                tmp = (\n                    // ternary-condition\n                    (\n                        local.isBrowser\n                        ? \"browser\"\n                        : \"node\"\n                    )\n                    + \" - \" + xhr.statusCode + \" \" + xhr.method + \" \" + xhr.url\n                    + \"\\n\"\n                );\n                xhr.error.message = tmp + xhr.error.message;\n                xhr.error.stack = tmp + xhr.error.stack;\n            }\n            // update responseHeaders\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\n            if (xhr.getAllResponseHeaders) {\n                xhr.getAllResponseHeaders().replace((\n                    /(.*?):\\u0020*(.*?)\\r\\n/g\n                ), function (ignore, match1, match2) {\n                    xhr.responseHeaders[match1.toLowerCase()] = match2;\n                });\n            }\n            // debug ajaxResponse\n            xhr.responseContentLength = (\n                xhr.response\n                && (xhr.response.byteLength || xhr.response.length)\n            ) | 0;\n            xhr.timeElapsed = Date.now() - xhr.timeStart;\n            if (xhr.modeDebug) {\n                console.error(\"serverLog - \" + JSON.stringify({\n                    time: new Date(xhr.timeStart).toISOString(),\n                    type: \"ajaxResponse\",\n                    method: xhr.method,\n                    url: xhr.url,\n                    statusCode: xhr.statusCode,\n                    timeElapsed: xhr.timeElapsed,\n                    // extra\n                    responseContentLength: xhr.responseContentLength\n                }));\n            }\n            // init responseType\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType\n            switch (xhr.response && xhr.responseType) {\n            // init responseText\n            // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText\n            case \"\":\n            case \"text\":\n                if (typeof xhr.responseText === \"string\") {\n                    break;\n                }\n                xhr.responseText = bufferValidateAndCoerce(\n                    xhr.response,\n                    \"string\"\n                );\n                break;\n            case \"arraybuffer\":\n                xhr.responseBuffer = bufferValidateAndCoerce(xhr.response);\n                break;\n            }\n            // cleanup timerTimeout\n            clearTimeout(xhr.timerTimeout);\n            // cleanup requestStream and responseStream\n            streamCleanup(xhr.requestStream);\n            streamCleanup(xhr.responseStream);\n            onError(xhr.error, xhr);\n            break;\n        }\n    };\n    streamCleanup = function (stream) {\n    /*\n     * this function will try to end or destroy <stream>\n     */\n        var error;\n        // try to end stream\n        try {\n            stream.end();\n        } catch (errorCaught) {\n            error = errorCaught;\n        }\n        // if error, then try to destroy stream\n        if (error) {\n            try {\n                stream.destroy();\n            } catch (ignore) {}\n        }\n    };\n    xhrInit = function () {\n    /*\n     * this function will init xhr\n     */\n        // init option\n        Object.keys(option).forEach(function (key) {\n            if (key[0] !== \"_\") {\n                xhr[key] = option[key];\n            }\n        });\n        // init timeout\n        timeout = xhr.timeout || local2.timeoutDefault || 30000;\n        // init defaults\n        local.objectAssignDefault(xhr, {\n            corsForwardProxyHost: local2.corsForwardProxyHost,\n            headers: {},\n            location: (local.isBrowser && location) || {},\n            method: \"GET\",\n            responseType: \"\"\n        });\n        // init headers\n        Object.keys(xhr.headers).forEach(function (key) {\n            xhr.headers[key.toLowerCase()] = xhr.headers[key];\n        });\n        // coerce Uint8Array -> Buffer\n        if (\n            !local.isBrowser\n            && !Buffer.isBuffer(xhr.data)\n            && Object.prototype.toString.call(xhr.data)\n            === \"[object Uint8Array]\"\n        ) {\n            Object.setPrototypeOf(xhr.data, Buffer.prototype);\n        }\n        // init misc\n        local2._debugXhr = xhr;\n        xhr.onEvent = onEvent;\n        xhr.responseHeaders = {};\n        xhr.timeStart = xhr.timeStart || Date.now();\n    };\n    // init onError\n    if (local2.onErrorWithStack) {\n        onError = local2.onErrorWithStack(onError);\n    }\n    // init xhr - XMLHttpRequest\n    xhr = (\n        local.isBrowser\n        && !option.httpRequest\n        && !(local2.serverLocalUrlTest && local2.serverLocalUrlTest(option.url))\n        && new XMLHttpRequest()\n    );\n    // init xhr - http.request\n    if (!xhr) {\n        xhr = local.identity(local2.urlParse || require(\"url\").parse)(\n            option.url\n        );\n        // init xhr\n        xhrInit();\n        // init xhr - http.request\n        xhr = local.identity(\n            option.httpRequest\n            || (local.isBrowser && local2.http.request)\n            || require(xhr.protocol.slice(0, -1)).request\n        )(xhr, function (responseStream) {\n        /*\n         * this function will read <responseStream>\n         */\n            var chunkList;\n            chunkList = [];\n            xhr.responseHeaders = (\n                responseStream.responseHeaders\n                || responseStream.headers\n            );\n            xhr.responseStream = responseStream;\n            xhr.statusCode = responseStream.statusCode;\n            responseStream.dataLength = 0;\n            responseStream.on(\"data\", function (chunk) {\n                chunkList.push(chunk);\n            });\n            responseStream.on(\"end\", function () {\n                xhr.response = (\n                    local.isBrowser\n                    ? chunkList[0]\n                    : Buffer.concat(chunkList)\n                );\n                responseStream.dataLength = (\n                    xhr.response.byteLength\n                    || xhr.response.length\n                );\n                xhr.onEvent({\n                    type: \"load\"\n                });\n            });\n            responseStream.on(\"error\", xhr.onEvent);\n        });\n        xhr.abort = function () {\n        /*\n         * this function will abort xhr-request\n         * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort\n         */\n            xhr.onEvent({\n                type: \"abort\"\n            });\n        };\n        xhr.addEventListener = local.nop;\n        xhr.open = local.nop;\n        xhr.requestStream = xhr;\n        xhr.send = xhr.end;\n        xhr.setRequestHeader = local.nop;\n        xhr.on(\"error\", onEvent);\n    }\n    // init xhr\n    xhrInit();\n    // init timerTimeout\n    xhr.timerTimeout = setTimeout(function () {\n        xhr.error = xhr.error || new Error(\n            \"onTimeout - timeout-error - \"\n            + timeout + \" ms - \" + \"ajax \" + xhr.method + \" \" + xhr.url\n        );\n        xhr.abort();\n        // cleanup requestStream and responseStream\n        streamCleanup(xhr.requestStream);\n        streamCleanup(xhr.responseStream);\n    }, timeout);\n    // increment ajaxProgressCounter\n    local2.ajaxProgressCounter = local2.ajaxProgressCounter || 0;\n    local2.ajaxProgressCounter += 1;\n    // init event-handling\n    xhr.addEventListener(\"abort\", xhr.onEvent);\n    xhr.addEventListener(\"error\", xhr.onEvent);\n    xhr.addEventListener(\"load\", xhr.onEvent);\n    xhr.addEventListener(\"loadstart\", ajaxProgressUpdate);\n    xhr.addEventListener(\"progress\", ajaxProgressUpdate);\n    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/upload\n    if (xhr.upload && xhr.upload.addEventListener) {\n        xhr.upload.addEventListener(\"progress\", ajaxProgressUpdate);\n    }\n    // open url - corsForwardProxyHost\n    if (local.functionOrNop(local2.corsForwardProxyHostIfNeeded)(xhr)) {\n        xhr.open(xhr.method, local2.corsForwardProxyHostIfNeeded(xhr));\n        xhr.setRequestHeader(\n            \"forward-proxy-headers\",\n            JSON.stringify(xhr.headers)\n        );\n        xhr.setRequestHeader(\"forward-proxy-url\", xhr.url);\n    // open url - default\n    } else {\n        xhr.open(xhr.method, xhr.url);\n    }\n    // send headers\n    Object.keys(xhr.headers).forEach(function (key) {\n        xhr.setRequestHeader(key, xhr.headers[key]);\n    });\n    // send data\n    switch ((xhr.data && xhr.data.constructor) || true) {\n    // Blob\n    // https://developer.mozilla.org/en-US/docs/Web/API/Blob\n    case local2.Blob:\n    // FormData\n    // https://developer.mozilla.org/en-US/docs/Web/API/FormData\n    case local2.FormData:\n        local2.blobRead(xhr.data, function (error, data) {\n            if (error) {\n                xhr.onEvent(error);\n                return;\n            }\n            // send data\n            xhr.send(data);\n        });\n        break;\n    default:\n        xhr.send(xhr.data);\n    }\n    return xhr;\n};\n\nlocal.cliRun = function (option) {\n/*\n * this function will run cli\n */\n    local.cliDict._eval = local.cliDict._eval || function () {\n    /*\n     * <code>\n     * will eval <code>\n     */\n        globalThis.local = local;\n        local.vm.runInThisContext(process.argv[3]);\n    };\n    local.cliDict[\"--eval\"] = local.cliDict[\"--eval\"] || local.cliDict._eval;\n    local.cliDict[\"-e\"] = local.cliDict[\"-e\"] || local.cliDict._eval;\n    local.cliDict._help = local.cliDict._help || function () {\n    /*\n     *\n     * will print help\n     */\n        var commandList;\n        var file;\n        var packageJson;\n        var text;\n        var textDict;\n        commandList = [{\n            argList: \"<arg2>  ...\",\n            description: \"usage:\",\n            command: [\"<arg1>\"]\n        }, {\n            argList: \"'console.log(\\\"hello world\\\")'\",\n            description: \"example:\",\n            command: [\"--eval\"]\n        }];\n        file = __filename.replace((\n            /.*\\//\n        ), \"\");\n        option = Object.assign({}, option);\n        packageJson = require(\"./package.json\");\n        // validate comment\n        option.rgxComment = option.rgxComment || (\n            /\\)\\u0020\\{\\n(?:|\\u0020{4})\\/\\*\\n(?:\\u0020|\\u0020{5})\\*((?:\\u0020<[^>]*?>|\\u0020\\.\\.\\.)*?)\\n(?:\\u0020|\\u0020{5})\\*\\u0020(will\\u0020.*?\\S)\\n(?:\\u0020|\\u0020{5})\\*\\/\\n(?:\\u0020{4}|\\u0020{8})\\S/\n        );\n        textDict = {};\n        Object.keys(local.cliDict).sort().forEach(function (key, ii) {\n            if (key[0] === \"_\" && key !== \"_default\") {\n                return;\n            }\n            text = String(local.cliDict[key]);\n            if (key === \"_default\") {\n                key = \"\";\n            }\n            textDict[text] = textDict[text] || (ii + 2);\n            ii = textDict[text];\n            if (commandList[ii]) {\n                commandList[ii].command.push(key);\n                return;\n            }\n            try {\n                commandList[ii] = option.rgxComment.exec(text);\n                commandList[ii] = {\n                    argList: (commandList[ii][1] || \"\").trim(),\n                    command: [key],\n                    description: commandList[ii][2]\n                };\n            } catch (ignore) {\n                local.assertThrow(null, new Error(\n                    \"cliRun - cannot parse comment in COMMAND \"\n                    + key + \":\\nnew RegExp(\"\n                    + JSON.stringify(option.rgxComment.source)\n                    + \").exec(\" + JSON.stringify(text)\n                    .replace((\n                        /\\\\\\\\/g\n                    ), \"\\u0000\")\n                    .replace((\n                        /\\\\n/g\n                    ), \"\\\\n\\\\\\n\")\n                    .replace((\n                        /\\u0000/g\n                    ), \"\\\\\\\\\") + \");\"\n                ));\n            }\n        });\n        text = \"\";\n        text += packageJson.name + \" (\" + packageJson.version + \")\\n\\n\";\n        text += commandList\n        .filter(function (element) {\n            return element;\n        })\n        .map(function (element, ii) {\n            element.command = element.command.filter(function (element) {\n                return element;\n            });\n            switch (ii) {\n            case 0:\n            case 1:\n                element.argList = [element.argList];\n                break;\n            default:\n                element.argList = element.argList.split(\" \");\n                element.description = (\n                    \"# COMMAND \"\n                    + (element.command[0] || \"<none>\") + \"\\n# \"\n                    + element.description\n                );\n            }\n            return (\n                element.description + \"\\n  \" + file\n                + (\"  \" + element.command.sort().join(\"|\") + \"  \")\n                    .replace((\n                    /^\\u0020{4}$/\n                ), \"  \")\n                + element.argList.join(\"  \")\n            );\n        })\n        .join(\"\\n\\n\");\n        console.log(text);\n    };\n    local.cliDict[\"--help\"] = local.cliDict[\"--help\"] || local.cliDict._help;\n    local.cliDict[\"-h\"] = local.cliDict[\"-h\"] || local.cliDict._help;\n    local.cliDict._default = local.cliDict._default || local.cliDict._help;\n    local.cliDict.help = local.cliDict.help || local.cliDict._help;\n    local.cliDict._interactive = local.cliDict._interactive || function () {\n    /*\n     *\n     * will start interactive-mode\n     */\n        globalThis.local = local;\n        local.identity(local.replStart || require(\"repl\").start)({\n            useGlobal: true\n        });\n    };\n    local.cliDict[\"--interactive\"] = (\n        local.cliDict[\"--interactive\"]\n        || local.cliDict._interactive\n    );\n    local.cliDict[\"-i\"] = local.cliDict[\"-i\"] || local.cliDict._interactive;\n    local.cliDict._version = local.cliDict._version || function () {\n    /*\n     *\n     * will print version\n     */\n        console.log(require(__dirname + \"/package.json\").version);\n    };\n    local.cliDict[\"--version\"] = (\n        local.cliDict[\"--version\"]\n        || local.cliDict._version\n    );\n    local.cliDict[\"-v\"] = local.cliDict[\"-v\"] || local.cliDict._version;\n    // default to --help command if no arguments are given\n    if (process.argv.length <= 2) {\n        local.cliDict._help();\n        return;\n    }\n    if (local.cliDict[process.argv[2]]) {\n        local.cliDict[process.argv[2]]();\n        return;\n    }\n    local.cliDict._default();\n};\n\nlocal.onErrorDefault = function (error) {\n/*\n * this function will if <error> exists, then print it to stderr\n */\n    if (error) {\n        console.error(error);\n    }\n    return error;\n};\n\nlocal.onErrorWithStack = function (onError) {\n/*\n * this function will create a new callback that will call onError,\n * and append the current stack to any error\n */\n    var onError2;\n    var stack;\n    stack = new Error().stack.replace((\n        /(.*?)\\n.*?$/m\n    ), \"$1\");\n    onError2 = function (error, data, meta) {\n        if (\n            error\n            && typeof error.stack === \"string\"\n            && error !== local.errorDefault\n            && String(error.stack).indexOf(stack.split(\"\\n\")[2]) < 0\n        ) {\n            // append the current stack to error.stack\n            error.stack += \"\\n\" + stack;\n        }\n        onError(error, data, meta);\n    };\n    // debug onError\n    onError2.toString = function () {\n        return String(onError);\n    };\n    return onError2;\n};\n\nlocal.onNext = function (option, onError) {\n/*\n * this function will wrap onError inside recursive-function <option>.onNext,\n * and append the current stack to any error\n */\n    option.onNext = local.onErrorWithStack(function (error, data, meta) {\n        try {\n            option.modeNext += (\n                (error && !option.modeErrorIgnore)\n                ? 1000\n                : 1\n            );\n            if (option.modeDebug) {\n                console.error(\"onNext - \" + JSON.stringify({\n                    modeNext: option.modeNext,\n                    errorMessage: error && error.message\n                }));\n                if (error && error.stack) {\n                    console.error(error.stack);\n                }\n            }\n            onError(error, data, meta);\n        } catch (errorCaught) {\n            // throw errorCaught to break infinite recursion-loop\n            if (option.errorCaught) {\n                local.assertThrow(null, option.errorCaught);\n            }\n            option.errorCaught = errorCaught;\n            option.onNext(errorCaught, data, meta);\n        }\n    });\n    return option;\n};\n\nlocal.onParallel = function (onError, onEach, onRetry) {\n/*\n * this function will create a function that will\n * 1. run async tasks in parallel\n * 2. if counter === 0 or error occurred, then call onError with error\n */\n    var onParallel;\n    onError = local.onErrorWithStack(onError);\n    onEach = onEach || local.nop;\n    onRetry = onRetry || local.nop;\n    onParallel = function (error, data) {\n        if (onRetry(error, data)) {\n            return;\n        }\n        // decrement counter\n        onParallel.counter -= 1;\n        // validate counter\n        if (!(onParallel.counter >= 0 || error || onParallel.error)) {\n            error = new Error(\n                \"invalid onParallel.counter = \" + onParallel.counter\n            );\n        // ensure onError is run only once\n        } else if (onParallel.counter < 0) {\n            return;\n        }\n        // handle error\n        if (error) {\n            onParallel.error = error;\n            // ensure counter <= 0\n            onParallel.counter = -Math.abs(onParallel.counter);\n        }\n        // call onError when isDone\n        if (onParallel.counter <= 0) {\n            onError(error, data);\n            return;\n        }\n        onEach();\n    };\n    // init counter\n    onParallel.counter = 0;\n    // return callback\n    return onParallel;\n};\n\nlocal.onParallelList = function (option, onEach, onError) {\n/*\n * this function will\n * 1. async-run onEach in parallel,\n *    with given option.rateLimit and option.retryLimit\n * 2. call onError when onParallel.ii + 1 === option.list.length\n */\n    var isListEnd;\n    var onEach2;\n    var onParallel;\n    option.list = option.list || [];\n    onEach2 = function () {\n        while (true) {\n            if (!(onParallel.ii + 1 < option.list.length)) {\n                isListEnd = true;\n                return;\n            }\n            if (!(onParallel.counter < option.rateLimit + 1)) {\n                return;\n            }\n            onParallel.ii += 1;\n            onEach({\n                element: option.list[onParallel.ii],\n                ii: onParallel.ii,\n                list: option.list,\n                retry: 0\n            }, onParallel);\n        }\n    };\n    onParallel = local.onParallel(onError, onEach2, function (error, data) {\n        if (error && data && data.retry < option.retryLimit) {\n            local.onErrorDefault(error);\n            data.retry += 1;\n            setTimeout(function () {\n                onParallel.counter -= 1;\n                onEach(data, onParallel);\n            }, 1000);\n            return true;\n        }\n        // restart if option.list has grown\n        if (isListEnd && (onParallel.ii + 1 < option.list.length)) {\n            isListEnd = null;\n            onEach2();\n        }\n    });\n    onParallel.ii = -1;\n    option.rateLimit = Number(option.rateLimit) || 6;\n    option.rateLimit = Math.max(option.rateLimit, 1);\n    option.retryLimit = Number(option.retryLimit) || 2;\n    onParallel.counter += 1;\n    onEach2();\n    onParallel();\n};\n}());\n\n\n\n// run shared js-env code - function\n(function () {\nlocal.githubCrudAjax = function (option, onError) {\n/*\n * this function will make a low-level content-request to github\n * https://developer.github.com/v3/repos/contents/\n */\n    // init option\n    option = {\n        content: option.content,\n        headers: Object.assign({\n            // github oauth authentication\n            Authorization: \"token \" + (\n                typeof process === \"object\" && process && process.env.GITHUB_TOKEN\n            ),\n            // bug-workaround - https://developer.github.com/v3/#user-agent-required\n            \"User-Agent\": \"undefined\"\n        }, option.headers),\n        httpRequest: option.httpRequest,\n        message: option.message,\n        method: option.method || \"GET\",\n        responseJson: {},\n        sha: option.sha,\n        url: option.url\n    };\n    option.url = option.url\n/* jslint ignore:start */\n// parse https://github.com/:owner/:repo/blob/:branch/:path\n.replace(\n    (/^https:\\/\\/github.com\\/([^\\/]+?\\/[^\\/]+?)\\/blob\\/([^\\/]+?)\\/(.+)/),\n    'https://api.github.com/repos/$1/contents/$3?branch=$2'\n)\n// parse https://github.com/:owner/:repo/tree/:branch/:path\n.replace(\n    (/^https:\\/\\/github.com\\/([^\\/]+?\\/[^\\/]+?)\\/tree\\/([^\\/]+?)\\/(.+)/),\n    'https://api.github.com/repos/$1/contents/$3?branch=$2'\n)\n// parse https://raw.githubusercontent.com/:owner/:repo/:branch/:path\n.replace(\n(/^https:\\/\\/raw.githubusercontent.com\\/([^\\/]+?\\/[^\\/]+?)\\/([^\\/]+?)\\/(.+)/),\n    'https://api.github.com/repos/$1/contents/$3?branch=$2'\n)\n// parse https://:owner.github.io/:repo/:path\n.replace(\n    (/^https:\\/\\/([^\\.]+?)\\.github\\.io\\/([^\\/]+?)\\/(.+)/),\n    'https://api.github.com/repos/$1/$2/contents/$3?branch=gh-pages'\n)\n// parse :owner/:repo\n.replace(\n    (/^([^\\/]+?\\/[^\\/]+?)$/),\n    'https://github.com/$1'\n)\n/* jslint ignore:end */\n    .replace((\n        /\\?branch=(.*)/\n    ), function (match0, match1) {\n        option.branch = match1;\n        if (option.method === \"GET\") {\n            match0 = match0.replace(\"branch\", \"ref\");\n        }\n        return match0;\n    });\n    if ((\n        /^https:\\/\\/github\\.com\\/[^\\/]+?\\/[^\\/]+?$/\n    ).test(option.url)) {\n        option.data = JSON.stringify({\n            name: option.url.split(\"/\")[4]\n        });\n        switch (option.method) {\n        case \"DELETE\":\n            option.url = (\n                \"https://api.github.com/repos/\"\n                + option.url.split(\"/\").slice(3).join(\"/\")\n            );\n            break;\n        case \"POST_ORG\":\n            option.url = (\n                \"https://api.github.com/orgs/\"\n                + option.url.split(\"/\")[3] + \"/repos\"\n            );\n            break;\n        case \"POST_USER\":\n            option.url = \"https://api.github.com/user/repos\";\n            break;\n        }\n        option.method = option.method.split(\"_\")[0];\n    } else {\n        if (option.url.indexOf(\"https://api.github.com/repos/\") !== 0) {\n            console.error(\"githubCrud - invalid url \" + option.url);\n            onError(new Error(\"invalid url \" + option.url));\n            return;\n        }\n        if (option.method !== \"GET\") {\n            option.message = (\n                option.message\n                || \"[ci skip] \" + option.method + \" file \"\n                + option.url.replace((\n                    /\\?.*/\n                ), \"\")\n            );\n            option.url += \"&message=\" + encodeURIComponent(option.message);\n            if (option.sha) {\n                option.url += \"&sha=\" + option.sha;\n            }\n            option.data = JSON.stringify({\n                branch: option.branch,\n                content: Buffer.from(option.content || \"\").toString(\"base64\"),\n                message: option.message,\n                sha: option.sha\n            });\n        }\n    }\n    local.ajax(option, function (error, xhr) {\n        console.error(\"serverLog - \" + JSON.stringify({\n            time: new Date(xhr.timeStart).toISOString(),\n            type: \"githubCrudResponse\",\n            method: xhr.method,\n            url: xhr.url,\n            statusCode: xhr.statusCode,\n            timeElapsed: xhr.timeElapsed\n        }));\n        local.onErrorDefault(\n            error\n            && error.statusCode !== 404\n            && xhr\n            && (\"githubCrud - \" + xhr.responseText)\n        );\n        try {\n            option.responseJson = JSON.parse(xhr.responseText);\n        } catch (ignore) {}\n        onError(\n            !(option.method === \"DELETE\" && xhr.statusCode === 404) && error,\n            option.responseJson\n        );\n    });\n};\n\nlocal.githubCrudContentDelete = function (option, onError) {\n/*\n * this function will delete github-file <option>.url\n * https://developer.github.com/v3/repos/contents/#delete-a-file\n */\n    option = {\n        httpRequest: option.httpRequest,\n        message: option.message,\n        url: option.url\n    };\n    local.onNext(option, function (error, data) {\n        switch (option.modeNext) {\n        case 1:\n            // get sha\n            local.githubCrudAjax({\n                httpRequest: option.httpRequest,\n                url: option.url\n            }, option.onNext);\n            break;\n        case 2:\n            // delete file with sha\n            if (!error && data.sha) {\n                local.githubCrudAjax({\n                    httpRequest: option.httpRequest,\n                    message: option.message,\n                    method: \"DELETE\",\n                    sha: data.sha,\n                    url: option.url\n                }, option.onNext);\n                return;\n            }\n            // delete tree\n            local.onParallelList({\n                list: data\n            }, function (option2, onParallel) {\n                onParallel.counter += 1;\n                // recurse\n                local.githubCrudContentDelete({\n                    httpRequest: option.httpRequest,\n                    message: option.message,\n                    url: option2.element.url\n                }, onParallel);\n            }, option.onNext);\n            break;\n        default:\n            onError(error, data);\n        }\n    });\n    option.modeNext = 0;\n    option.onNext();\n};\n\nlocal.githubCrudContentGet = function (option, onError) {\n/*\n * this function will get github-file <option>.url\n * https://developer.github.com/v3/repos/contents/#get-contents\n */\n    option = {\n        httpRequest: option.httpRequest,\n        url: option.url\n    };\n    local.onNext(option, function (error, data) {\n        switch (option.modeNext) {\n        case 1:\n            local.githubCrudAjax({\n                httpRequest: option.httpRequest,\n                url: option.url\n            }, option.onNext);\n            break;\n        case 2:\n            option.onNext(null, Buffer.from(data.content || \"\", \"base64\"));\n            break;\n        default:\n            onError(error, !error && data);\n        }\n    });\n    option.modeNext = 0;\n    option.onNext();\n};\n\nlocal.githubCrudContentPut = function (option, onError) {\n/*\n * this function will put <option>.content to github-file <option>.url\n * https://developer.github.com/v3/repos/contents/#create-a-file\n * https://developer.github.com/v3/repos/contents/#update-a-file\n */\n    option = {\n        content: option.content,\n        httpRequest: option.httpRequest,\n        message: option.message,\n        modeErrorIgnore: true,\n        url: option.url\n    };\n    local.onNext(option, function (error, data) {\n        switch (option.modeNext) {\n        case 1:\n            // get sha\n            local.githubCrudAjax({\n                httpRequest: option.httpRequest,\n                url: option.url\n            }, option.onNext);\n            break;\n        case 2:\n            // put file with sha\n            local.githubCrudAjax({\n                content: option.content,\n                httpRequest: option.httpRequest,\n                message: option.message,\n                method: \"PUT\",\n                sha: data.sha,\n                url: option.url\n            }, option.onNext);\n            break;\n        default:\n            onError(error, data);\n        }\n    });\n    option.modeNext = 0;\n    option.onNext();\n};\n\nlocal.githubCrudContentPutFile = function (option, onError) {\n/*\n * this function will put option.file to github-file <option>.url\n * https://developer.github.com/v3/repos/contents/#update-a-file\n */\n    option = {\n        file: option.file,\n        httpRequest: option.httpRequest,\n        message: option.message,\n        url: option.url\n    };\n    local.onNext(option, function (error, data) {\n        switch (option.modeNext) {\n        case 1:\n            // get file from url\n            if ((\n                /^(?:http|https):\\/\\//\n            ).test(option.file)) {\n                local.ajax({\n                    httpRequest: option.httpRequest,\n                    url: option.file\n                }, function (error, response) {\n                    option.onNext(error, response && response.data);\n                });\n                return;\n            }\n            // get file\n            local.fs.readFile(option.file, option.onNext);\n            break;\n        case 2:\n            local.githubCrudContentPut({\n                content: data,\n                httpRequest: option.httpRequest,\n                message: option.message,\n                // resolve file in url\n                url: (\n                    // ternary-condition\n                    (\n                        /\\/$/\n                    ).test(option.url)\n                    ? option.url + local.path.basename(option.file)\n                    : option.url\n                )\n            }, option.onNext);\n            break;\n        default:\n            onError(error, data);\n        }\n    });\n    option.modeNext = 0;\n    option.onNext();\n};\n\nlocal.githubCrudContentTouch = function (option, onError) {\n/*\n * this function will touch github-file <option>.url\n * https://developer.github.com/v3/repos/contents/#update-a-file\n */\n    option = {\n        httpRequest: option.httpRequest,\n        message: option.message,\n        modeErrorIgnore: true,\n        url: option.url\n    };\n    local.onNext(option, function (error, data) {\n        switch (option.modeNext) {\n        case 1:\n            // get sha\n            local.githubCrudAjax({\n                httpRequest: option.httpRequest,\n                url: option.url\n            }, option.onNext);\n            break;\n        case 2:\n            // put file with sha\n            local.githubCrudAjax({\n                content: Buffer.from(data.content || \"\", \"base64\"),\n                httpRequest: option.httpRequest,\n                message: option.message,\n                method: \"PUT\",\n                sha: data.sha,\n                url: option.url\n            }, option.onNext);\n            break;\n        default:\n            onError(error, data);\n        }\n    });\n    option.modeNext = 0;\n    option.onNext();\n};\n\nlocal.githubCrudContentTouchList = function (option, onError) {\n/*\n * this function will touch github-files <option>.urlList in parallel\n * https://developer.github.com/v3/repos/contents/#update-a-file\n */\n    local.onParallelList({\n        list: option.urlList\n    }, function (option2, onParallel) {\n        onParallel.counter += 1;\n        local.githubCrudContentTouch({\n            httpRequest: option.httpRequest,\n            message: option.message,\n            url: option2.element\n        }, onParallel);\n    }, onError);\n};\n\nlocal.githubCrudRepoCreate = function (option, onError) {\n/*\n * this function will create github-repo <option>.url\n * https://developer.github.com/v3/repos/#create\n */\n    local.githubCrudAjax({\n        httpRequest: option.httpRequest,\n        method: \"POST_ORG\",\n        url: option.url\n    }, function (error, data) {\n        if (!(error && error.statusCode === 404)) {\n            onError(error, data);\n            return;\n        }\n        local.githubCrudAjax({\n            httpRequest: option.httpRequest,\n            method: \"POST_USER\",\n            url: option.url\n        }, onError);\n    });\n};\n\nlocal.githubCrudRepoCreateList = function (option, onError) {\n/*\n * this function will create github-repos <option>.urlList in parallel\n * https://developer.github.com/v3/repos/#create\n */\n    local.onParallelList({\n        list: option.urlList\n    }, function (option2, onParallel) {\n        onParallel.counter += 1;\n        local.githubCrudRepoCreate({\n            httpRequest: option.httpRequest,\n            url: option2.element\n        }, onParallel);\n    }, onError);\n};\n\nlocal.githubCrudRepoDelete = function (option, onError) {\n/*\n * this function will delete github-repo <option>.url\n * https://developer.github.com/v3/repos/#delete-a-repository\n */\n    local.githubCrudAjax({\n        httpRequest: option.httpRequest,\n        method: \"DELETE\",\n        url: option.url\n    }, onError);\n};\n\nlocal.githubCrudRepoDeleteList = function (option, onError) {\n/*\n * this function will delete github-repos <option>.urlList in parallel\n * https://developer.github.com/v3/repos/#delete-a-repository\n */\n    local.onParallelList({\n        list: option.urlList\n    }, function (option2, onParallel) {\n        onParallel.counter += 1;\n        local.githubCrudRepoDelete({\n            httpRequest: option.httpRequest,\n            url: option2.element\n        }, onParallel);\n    }, onError);\n};\n}());\n\n\n\n// run node js-env code - init-after\n/* istanbul ignore next */\n(function () {\nif (local.isBrowser) {\n    return;\n}\n\n\n\nlocal.cliDict = {};\nlocal.cliDict.delete = function () {\n/*\n * <fileRemote|dirRemote> <commitMessage>\n * will delete from github <fileRemote|dirRemote>\n */\n    local.github_crud.githubCrudContentDelete({\n        message: process.argv[4],\n        url: process.argv[3]\n    }, function (error) {\n        process.exit(Boolean(error));\n    });\n};\n\nlocal.cliDict.get = function () {\n/*\n * <fileRemote>\n * will get from github <fileRemote>\n */\n    local.github_crud.githubCrudContentGet({\n        url: process.argv[3]\n    }, function (error, data) {\n        try {\n            process.stdout.write(data);\n        } catch (ignore) {}\n        process.exit(Boolean(error));\n    });\n};\n\nlocal.cliDict.put = function () {\n/*\n * <fileRemote> <fileLocal> <commitMessage>\n * will put on github <fileRemote> to <fileLocal>\n */\n    local.github_crud.githubCrudContentPutFile({\n        message: process.argv[5],\n        url: process.argv[3],\n        file: process.argv[4]\n    }, function (error) {\n        process.exit(Boolean(error));\n    });\n};\n\nlocal.cliDict.repo_create = function () {\n/*\n * <repoList>\n * will create on github in parallel, comma-separated <repoList>\n */\n    local.github_crud.githubCrudRepoCreateList({\n        urlList: process.argv[3].split(\n            /[,\\s]/g\n        ).filter(local.identity)\n    }, function (error) {\n        process.exit(Boolean(error));\n    });\n};\n\nlocal.cliDict.repo_delete = function () {\n/*\n * <repoList>\n * will delete from github in parallel, comma-separated <repoList>\n */\n    local.github_crud.githubCrudRepoDeleteList({\n        urlList: process.argv[3].split(\n            /[,\\s]/g\n        ).filter(local.identity)\n    }, function (error) {\n        process.exit(Boolean(error));\n    });\n};\n\nlocal.cliDict.touch = function () {\n/*\n * <fileRemoteList> <commitMessage>\n * will touch on github in parallel, comma-separated <fileRemoteList>\n */\n    local.github_crud.githubCrudContentTouchList({\n        message: process.argv[4],\n        urlList: process.argv[3].split(\n            /[,\\s]/g\n        ).filter(local.identity)\n    }, function (error) {\n        process.exit(Boolean(error));\n    });\n};\n\n// run cli\nif (module === require.main && !globalThis.utility2_rollup) {\n    local.cliRun();\n}\n}());\n\n\n\n}());\n","/home/travis/build/kaizhu256/node-github-crud/example.js":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nexample.js\n\nthis script will run a web-demo of github-crud\n\ninstruction\n    1. save this script as example.js\n    2. edit env vars below\n    3. run the shell command:\n        $ npm install github-crud && node example.js\n    4. edit this script to suit your needs\n*/\n\n\n\n/* istanbul instrument in package github_crud */\n/* jslint utility2:true */\n(function () {\n\"use strict\";\n\n\n\n/*\n * edit begin\n * edit env vars below\n */\nprocess.env.BRANCH = \"gh-pages\";\nprocess.env.GITHUB_REPO = \"kaizhu256/node-github-crud\";\n// get $GITHUB_TOKEN from https://github.com/settings/tokens\nprocess.env.GITHUB_TOKEN = process.env.GITHUB_TOKEN || \"xxxxxxxx\";\n/*\n * edit end\n */\n\n\n\nvar local;\nvar modeNext;\nvar onNext;\nmodeNext = 0;\n/* istanbul ignore next */\nonNext = function (error, data) {\n    if (error) {\n        console.error(error);\n    }\n    modeNext += 1;\n    switch (modeNext) {\n    // init\n    case 1:\n        if (\n            typeof window === \"object\"\n            || global.utility2_rollup // jslint ignore:line\n        ) {\n            return;\n        }\n        local = globalThis.utility2_moduleExports;\n        module.exports = local;\n        if (\n            process.env.npm_config_mode_auto_restart\n            || process.env.npm_config_mode_test\n        ) {\n            return;\n        }\n        onNext();\n        break;\n    // test github-crud put\n    case 2:\n        console.error(\"\\n\\n\\ngithub-crud put /foo/bar/hello.txt\\n\");\n        local.githubCrudContentPut({\n            content: \"hello world\\n\",\n            message: \"commit message 1\",\n            url: \"https://github.com/\" + process.env.GITHUB_REPO + \"/blob/\"\n            + process.env.BRANCH + \"/foo/bar/hello.txt\"\n        }, onNext);\n        break;\n    // test github-crud get\n    case 3:\n        console.error(\"\\n\\n\\ngithub-crud get /foo/bar/hello.txt\\n\");\n        local.githubCrudContentGet({\n            url: \"https://github.com/\" + process.env.GITHUB_REPO + \"/blob/\"\n            + process.env.BRANCH + \"/foo/bar/hello.txt\"\n        }, onNext);\n        break;\n    // test github-crud touch\n    case 4:\n        console.error(String(data));\n        console.error(\"\\n\\n\\ngithub-crud touch /foo/bar/hello.txt\\n\");\n        local.githubCrudContentTouch({\n            message: \"commit message 2\",\n            url: \"https://github.com/\" + process.env.GITHUB_REPO + \"/blob/\"\n            + process.env.BRANCH + \"/foo/bar/hello.txt\"\n        }, onNext);\n        break;\n    // test github-crud delete\n    case 5:\n        console.error(\"\\n\\n\\ngithub-crud delete /foo/bar/hello.txt\\n\");\n        local.githubCrudContentDelete({\n            message: \"commit message 3\",\n            url: \"https://github.com/\" + process.env.GITHUB_REPO + \"/blob/\"\n            + process.env.BRANCH + \"/foo/bar/hello.txt\"\n        }, onNext);\n        break;\n    }\n};\nonNext();\n}());"}